name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize

jobs:
  Pipeline_exectuion:
    name: Pipeline_exectuion
    runs-on: ubuntu-latest
    steps:
     - uses: actions/checkout@v2
     - run: echo "Pipeline submitted succeessfully"
   
  get_pipeline_arn:
    name: get_pipeline_run
    needs: Pipeline_exectuion
    runs-on: ubuntu-latest
    outputs:
      arn: ${{ steps.Fetch_Arn.outputs.value }}
    steps:
    - uses: actions/checkout@v2
    - id: Fetch_Arn
      name: Fetch SagemakerArn
      run: |
        echo "value=$(aws sagemaker list-pipeline-executions --pipeline-name AbalonePipeline --sort-by CreationTime --sort-order Descending --output json | jq .PipelineExecutionSummaries[].PipelineExecutionArn)" >> $GITHUB_OUTPUT
      env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "us-west-2"
    
  check_execution_status:
    name: Status check execution
    needs: get_pipeline_arn
    runs-on: ubuntu-latest
    steps:
    - run: echo ${{ needs.get_pipeline_arn.outputs.arn }}
    - name: check_on_Dynamodb
      run: |
        "value=$(aws dynamodb execute-statement --statement "SELECT * FROM execution_status WHERE pipelineExecutionArn='${{ needs.get_pipeline_arn.outputs.arn }}'")"
        if [ -z "$value" ]; then
         aws dynamodb execute-statement --statement "UPDATE execution_status SET pipelineExecutionArn='${{ needs.get_pipeline_arn.outputs.arn }}' SET github_runid='${{ github.run_id }}'"
      env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        AWS_DEFAULT_REGION: "us-west-2"
        
